NAME
    Devel::Local - Use development modules in place

SYNOPSIS
    Devel::Local sets up your Perl development environment with the PERL5LIB
    and PATH variables that you want.

    There are several ways to use Devel::Local. In your Perl code you can do
    just that:

        use Devel::Local;

    When you run a Perl program you can do this:

        > perl -MDevel::Local program.pl

    To use it with many Perl programs:

        > export PERL5OPT='-MDevel::Local'
        > perl program1.pl
        > perl program2.pl

    To set up your environment with Devel::Local:

        > export PERL5LIB=`perl -MDevel::Local::PERL5LIB`
        > export PATH=`perl -MDevel::Local::PATH`

    The handiest way to use Devel::Local is to add this line to your
    .bashrc:

        source `which devel-local.sh`

    Then you'll have the "devel-local" Bash function to turn things on
    whenever you need them:

        > devel-local
        > devel-local src/path
        > devel-local file/path

    See USAGE below from more details.

DESCRIPTION
    Sometimes when you are developing Perl software there can several Perl
    module code repositories involved. This module lets you specify which
    repositories you want to load Perl modules from, and formats them into a
    PERL5LIB environment variable format.

    Devel::Local takes a list of Perl module repositories that you specify
    in your current directory or your home directory. It adds the lib/
    subdirectories to the current value of PERL5LIB, and it also adds the
    bin/ subdirectories to your PATH environment variable.

    In addition to keeping a list of paths in specially named files, you can
    name a specific list file or name specific paths containing lib and bin
    dirs.

    Devel::Local always converts the paths to absolute forms, so switching
    directories should break them.

USAGE
    As was pointed out in the SYNOPSIS above, TMTOWTDI. There are many ways
    to set up and use Devel

    Create a file called "~/.perl-devel-local" that has lines like this:

        # Use the GitHub versions of these:
        ~/src/yaml-libyaml-pm/
        ~/src/catalyst-runtime/

    for generic values, or a file called "./.devel-local" that looks like
    this:

        # Use the GitHub versions of these:
        ../yaml-libyaml-pm/
        ../catalyst-runtime/

    for project specific values.

    You may also use any other config file path you wish, by setting the
    "PERL_DEVEL_LOCAL" environment variable.

    NOTE: Devel::Local will ignore all the lines in the config file after
    the first blank line. This way, you can put several groupings of devel
    libraries in one file. Just make sure that the grouping you want to use
    is at the top of the file.

BASH
    You may want to put a function like this one in your .bashrc file:

        function devel-local() {
            export PERL5LIB=`perl -MDevel::Local=PERL5LIB`
            export PATH=`perl -MDevel::Local=PATH`
            echo "PERL5LIB=$PERL5LIB"
            echo "PATH=$PATH"
        }

    Then any time you want to use Devel::Local values, you can just run:

        > devel-local

    from the command line. That's all you need to do!

SEE ALSO
    *   File::Share

    *   ylib

AUTHOR
    Ingy döt Net

COPYRIGHT AND LICENSE
    Copyright (c) 2011. Ingy döt Net.

    This program is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

    See http://www.perl.com/perl/misc/Artistic.html

